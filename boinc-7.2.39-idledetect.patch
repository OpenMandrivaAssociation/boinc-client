--- a/client/hostinfo_unix.cpp	2014-02-17 18:16:21.240501319 +0100
+++ b/client/hostinfo_unix.new.cpp	2014-02-16 16:35:45.000000000 +0100
@@ -1883,73 +1891,86 @@
 
 #if HAVE_XSS
 // Ask the X server for user idle time (using XScreenSaver API)
-// Returns true if the idle_treshold is smaller than the
-// idle time of the user (means: true = user is idle)
-bool xss_idle(long idle_treshold) {
+// Return true if the idle time exceeds idle_threshold.
+//
+bool xss_idle(long idle_threshold) {
     static XScreenSaverInfo* xssInfo = NULL;
     static Display* disp = NULL;
+    static bool error = false;
+        // some X call failed - always return not idle
     
+    if (error) return false;
+
     long idle_time = 0;
     
-    if(disp != NULL) {
-        XScreenSaverQueryInfo(disp, DefaultRootWindow(disp), xssInfo);
+    if (disp == NULL) {
+        disp = XOpenDisplay(NULL);
+        // XOpenDisplay may return NULL if there is no running X
+        // or DISPLAY points to wrong/invalid display
+        //
+        if (disp == NULL) {
+            error = true;
+            return false;
+        }
+        int event_base_return, error_base_return;
+        xssInfo = XScreenSaverAllocInfo();
+        if (!XScreenSaverQueryExtension(
+            disp, &event_base_return, &error_base_return
+        )){
+            error = true;
+            return false;
+        }
+    }
 
-        idle_time = xssInfo->idle;
+    XScreenSaverQueryInfo(disp, DefaultRootWindow(disp), xssInfo);
+    idle_time = xssInfo->idle;
 
 #if HAVE_DPMS
-        // XIdleTime Detection
-        // See header for location and copywrites.
-        //
-        int dummy;
-        CARD16 standby, suspend, off;
-        CARD16 state;
-        BOOL onoff;
+    // XIdleTime Detection
+    // See header for location and copywrites.
+    //
+    int dummy;
+    CARD16 standby, suspend, off;
+    CARD16 state;
+    BOOL onoff;
 
-        if (DPMSQueryExtension(disp, &dummy, &dummy)) {
-            if (DPMSCapable(disp)) {
-                DPMSGetTimeouts(disp, &standby, &suspend, &off);
-                DPMSInfo(disp, &state, &onoff);
+    if (DPMSQueryExtension(disp, &dummy, &dummy)) {
+        if (DPMSCapable(disp)) {
+            DPMSGetTimeouts(disp, &standby, &suspend, &off);
+            DPMSInfo(disp, &state, &onoff);
 
-                if (onoff) {
-                    switch (state) {
-                      case DPMSModeStandby:
-                          /* this check is a littlebit paranoid, but be sure */
-                          if (idle_time < (unsigned) (standby * 1000)) {
-                              idle_time += (standby * 1000);
-                          }
-                          break;
-                      case DPMSModeSuspend:
-                          if (idle_time < (unsigned) ((suspend + standby) * 1000)) {
-                              idle_time += ((suspend + standby) * 1000);
-                          }
-                          break;
-                      case DPMSModeOff:
-                          if (idle_time < (unsigned) ((off + suspend + standby) * 1000)) {
-                              idle_time += ((off + suspend + standby) * 1000);
-                          }
-                          break;
-                      case DPMSModeOn:
-                        default:
-                          break;
+            if (onoff) {
+                switch (state) {
+                case DPMSModeStandby:
+                    // this check is a littlebit paranoid, but be sure
+                    if (idle_time < (unsigned) (standby * 1000)) {
+                        idle_time += (standby * 1000);
+                    }
+                    break;
+                case DPMSModeSuspend:
+                    if (idle_time < (unsigned) ((suspend + standby) * 1000)) {
+                        idle_time += ((suspend + standby) * 1000);
                     }
+                    break;
+                case DPMSModeOff:
+                    if (idle_time < (unsigned) ((off + suspend + standby) * 1000)) {
+                        idle_time += ((off + suspend + standby) * 1000);
+                    }
+                    break;
+                case DPMSModeOn:
+                default:
+                    break;
                 }
-            } 
-        }
+            }
+        } 
+    }
 #endif
 
-        // convert from milliseconds to seconds
-        idle_time = idle_time / 1000;
-
-    } else {
-        disp = XOpenDisplay(NULL);
-        // XOpenDisplay may return NULL if there is no running X
-        // or DISPLAY points to wrong/invalid display
-        if(disp != NULL) {
-            xssInfo = XScreenSaverAllocInfo();
-        }
-    }
+    // convert from milliseconds to seconds
+    //
+    idle_time = idle_time / 1000;
 
-    return idle_treshold < idle_time;
+    return idle_threshold < idle_time;
 }
 #endif // HAVE_XSS
 #endif // LINUX_LIKE_SYSTEM
